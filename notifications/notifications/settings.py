"""
Django settings for notifications project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
# import environ
# from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = config('SECRET_KEY')

SECRET_KEY = os.environ.get("SECRET_KEY", "m!j+%k)bm-(5gzc3jm50nz4^oo98bv7()sfzy!#fq#u0h!47t$")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = bool(os.environ.get("DEBUG", default=0))

DEBUG = True

# ALLOWED_HOSTS = os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'https://collabtask-notifications.onrender.com').split(",")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'notify.apps.NotificationsConfig',

    'rest_framework',
    'rest_framework_simplejwt', 
    'corsheaders',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',

    # 'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'notifications.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'notifications.wsgi.application'


CORS_EXPOSE_HEADERS = ['Content-Disposition']

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'content-disposition'
]


# Autorisez les requêtes depuis votre frontend React
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Frontend
    "http://127.0.0.1:5173",
    "http://client:5173",
    "http://localhost",
    "http://localhost:8000",  # Service d'authentification
    "http://utilisateur:8000",
    "http://tache:8001",
    "http://localhost:8001",
    "http://127.0.0.1:8001", 
    "http://127.0.0.1:8000",
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost",
    "http://localhost:5173",
    "http://client:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8000",
    "http://utilisateur:8000",
    "http://tache:8001",
    "http://localhost:8001",
    "http://127.0.0.1:8001",
]


# Liste des hôtes autorisés
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
]

# Configuration pour les cookies de session
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = True

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True

# CSRF Configuration
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS.copy()


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # 'NAME': '/var/notifications/db.sqlite3',  # Chemin persisté
    }
}


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False  # Important: doit être False quand USE_TLS=True
EMAIL_HOST_USER = 'collabtask86@gmail.com'
EMAIL_HOST_PASSWORD = 'wwqq zvfm clqi aden'  # Mot de passe d'application
DEFAULT_FROM_EMAIL = 'collabtask86@gmail.com'
EMAIL_TIMEOUT = 10  # Timeout en secondes

USER_SERVICE_URL = 'http://utilisateur:8000'

TASK_SERVICE_URL = 'http://utilisateur:8000'


RABBITMQ = {
    'HOST': "rabbitmq",
    'PORT': 5672,
    'USER': 'guest',
    'PASSWORD': 'guest',
    'EXCHANGE': 'notifications_exchange',
    'QUEUE': 'notifications_queue',
    'ROUTING_KEYS': ['user.notification', 'task.notification']
}




# # Static files (CSS, JavaScript, Images)
# STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 

# env = environ.Env()
# environ.Env.read_env()


# DATABASES = {
#     'default': env.db('DATABASE_URL')
# }






