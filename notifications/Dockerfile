FROM python:3.12.3

# Installer des outils réseau
RUN apt-get update && apt-get install -y \
    iputils-ping \
    curl \
    dnsutils \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

COPY requirements.txt .
RUN pip install --upgrade pip && pip install -r requirements.txt

COPY . .

# Créer le répertoire pour la base de données
RUN mkdir -p /var/notifications
RUN chmod 777 /var/notifications

EXPOSE 8002

CMD ["sh", "-c", "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8002"]




# # Use the official Python runtime image
# FROM python:3.12.3
 
# # Create the app directory
# RUN mkdir /app
 
# # Set the working directory inside the container
# WORKDIR /app
 
# # Set environment variables 
# # Prevents Python from writing pyc files to disk
# ENV PYTHONDONTWRITEBYTECODE=1
# #Prevents Python from buffering stdout and stderr
# ENV PYTHONUNBUFFERED=1 
 
# # Upgrade pip
# RUN pip install --upgrade pip 
 
# # Copy the Django project  and install dependencies
# COPY requirements.txt  /app/
 
# # run this command to install all dependencies 
# RUN pip install --no-cache-dir -r requirements.txt
 
# # Copy the Django project to the container
# COPY . /app/
 
# # Expose the Django port
# EXPOSE 8002
 
# # Run Django’s development server
# CMD ["python", "manage.py", "runserver", "0.0.0.0:8002"]